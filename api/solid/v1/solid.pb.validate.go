// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/solid/v1/solid.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Solid with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Solid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Solid with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SolidMultiError, or nil if none found.
func (m *Solid) ValidateAll() error {
	return m.validate(true)
}

func (m *Solid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for WechatName

	// no validation rules for Date

	if len(errors) > 0 {
		return SolidMultiError(errors)
	}

	return nil
}

// SolidMultiError is an error wrapping multiple validation errors returned by
// Solid.ValidateAll() if the designated constraints aren't met.
type SolidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SolidMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SolidMultiError) AllErrors() []error { return m }

// SolidValidationError is the validation error returned by Solid.Validate if
// the designated constraints aren't met.
type SolidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SolidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SolidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SolidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SolidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SolidValidationError) ErrorName() string { return "SolidValidationError" }

// Error satisfies the builtin error interface
func (e SolidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSolid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SolidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SolidValidationError{}

// Validate checks the field values on CreateSolidRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSolidRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSolidRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSolidRequestMultiError, or nil if none found.
func (m *CreateSolidRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSolidRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetWechatName()); l < 1 || l > 50 {
		err := CreateSolidRequestValidationError{
			field:  "WechatName",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDate()) != 10 {
		err := CreateSolidRequestValidationError{
			field:  "Date",
			reason: "value length must be 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return CreateSolidRequestMultiError(errors)
	}

	return nil
}

// CreateSolidRequestMultiError is an error wrapping multiple validation errors
// returned by CreateSolidRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateSolidRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSolidRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSolidRequestMultiError) AllErrors() []error { return m }

// CreateSolidRequestValidationError is the validation error returned by
// CreateSolidRequest.Validate if the designated constraints aren't met.
type CreateSolidRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSolidRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSolidRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSolidRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSolidRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSolidRequestValidationError) ErrorName() string {
	return "CreateSolidRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSolidRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSolidRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSolidRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSolidRequestValidationError{}

// Validate checks the field values on CreateSolidReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSolidReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSolidReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSolidReplyMultiError, or nil if none found.
func (m *CreateSolidReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSolidReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSolid()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSolidReplyValidationError{
					field:  "Solid",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSolidReplyValidationError{
					field:  "Solid",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSolid()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSolidReplyValidationError{
				field:  "Solid",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSolidReplyMultiError(errors)
	}

	return nil
}

// CreateSolidReplyMultiError is an error wrapping multiple validation errors
// returned by CreateSolidReply.ValidateAll() if the designated constraints
// aren't met.
type CreateSolidReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSolidReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSolidReplyMultiError) AllErrors() []error { return m }

// CreateSolidReplyValidationError is the validation error returned by
// CreateSolidReply.Validate if the designated constraints aren't met.
type CreateSolidReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSolidReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSolidReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSolidReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSolidReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSolidReplyValidationError) ErrorName() string { return "CreateSolidReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateSolidReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSolidReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSolidReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSolidReplyValidationError{}

// Validate checks the field values on UpdateSolidRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSolidRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSolidRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSolidRequestMultiError, or nil if none found.
func (m *UpdateSolidRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSolidRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateSolidRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetWechatName()); l < 1 || l > 50 {
		err := UpdateSolidRequestValidationError{
			field:  "WechatName",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDate()) != 10 {
		err := UpdateSolidRequestValidationError{
			field:  "Date",
			reason: "value length must be 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return UpdateSolidRequestMultiError(errors)
	}

	return nil
}

// UpdateSolidRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateSolidRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateSolidRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSolidRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSolidRequestMultiError) AllErrors() []error { return m }

// UpdateSolidRequestValidationError is the validation error returned by
// UpdateSolidRequest.Validate if the designated constraints aren't met.
type UpdateSolidRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSolidRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSolidRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSolidRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSolidRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSolidRequestValidationError) ErrorName() string {
	return "UpdateSolidRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSolidRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSolidRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSolidRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSolidRequestValidationError{}

// Validate checks the field values on UpdateSolidReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateSolidReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSolidReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSolidReplyMultiError, or nil if none found.
func (m *UpdateSolidReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSolidReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSolidReplyMultiError(errors)
	}

	return nil
}

// UpdateSolidReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateSolidReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateSolidReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSolidReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSolidReplyMultiError) AllErrors() []error { return m }

// UpdateSolidReplyValidationError is the validation error returned by
// UpdateSolidReply.Validate if the designated constraints aren't met.
type UpdateSolidReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSolidReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSolidReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSolidReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSolidReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSolidReplyValidationError) ErrorName() string { return "UpdateSolidReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateSolidReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSolidReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSolidReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSolidReplyValidationError{}

// Validate checks the field values on DeleteSolidRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSolidRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSolidRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSolidRequestMultiError, or nil if none found.
func (m *DeleteSolidRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSolidRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteSolidRequestMultiError(errors)
	}

	return nil
}

// DeleteSolidRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteSolidRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteSolidRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSolidRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSolidRequestMultiError) AllErrors() []error { return m }

// DeleteSolidRequestValidationError is the validation error returned by
// DeleteSolidRequest.Validate if the designated constraints aren't met.
type DeleteSolidRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSolidRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSolidRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSolidRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSolidRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSolidRequestValidationError) ErrorName() string {
	return "DeleteSolidRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSolidRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSolidRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSolidRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSolidRequestValidationError{}

// Validate checks the field values on DeleteSolidReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteSolidReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSolidReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSolidReplyMultiError, or nil if none found.
func (m *DeleteSolidReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSolidReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSolidReplyMultiError(errors)
	}

	return nil
}

// DeleteSolidReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteSolidReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteSolidReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSolidReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSolidReplyMultiError) AllErrors() []error { return m }

// DeleteSolidReplyValidationError is the validation error returned by
// DeleteSolidReply.Validate if the designated constraints aren't met.
type DeleteSolidReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSolidReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSolidReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSolidReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSolidReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSolidReplyValidationError) ErrorName() string { return "DeleteSolidReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteSolidReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSolidReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSolidReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSolidReplyValidationError{}

// Validate checks the field values on GetSolidRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSolidRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSolidRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSolidRequestMultiError, or nil if none found.
func (m *GetSolidRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSolidRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetSolidRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSolidRequestMultiError(errors)
	}

	return nil
}

// GetSolidRequestMultiError is an error wrapping multiple validation errors
// returned by GetSolidRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSolidRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSolidRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSolidRequestMultiError) AllErrors() []error { return m }

// GetSolidRequestValidationError is the validation error returned by
// GetSolidRequest.Validate if the designated constraints aren't met.
type GetSolidRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSolidRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSolidRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSolidRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSolidRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSolidRequestValidationError) ErrorName() string { return "GetSolidRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSolidRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSolidRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSolidRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSolidRequestValidationError{}

// Validate checks the field values on GetSolidReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSolidReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSolidReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSolidReplyMultiError, or
// nil if none found.
func (m *GetSolidReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSolidReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSolid()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSolidReplyValidationError{
					field:  "Solid",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSolidReplyValidationError{
					field:  "Solid",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSolid()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSolidReplyValidationError{
				field:  "Solid",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSolidReplyMultiError(errors)
	}

	return nil
}

// GetSolidReplyMultiError is an error wrapping multiple validation errors
// returned by GetSolidReply.ValidateAll() if the designated constraints
// aren't met.
type GetSolidReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSolidReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSolidReplyMultiError) AllErrors() []error { return m }

// GetSolidReplyValidationError is the validation error returned by
// GetSolidReply.Validate if the designated constraints aren't met.
type GetSolidReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSolidReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSolidReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSolidReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSolidReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSolidReplyValidationError) ErrorName() string { return "GetSolidReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetSolidReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSolidReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSolidReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSolidReplyValidationError{}

// Validate checks the field values on ListSolidRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSolidRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSolidRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSolidRequestMultiError, or nil if none found.
func (m *ListSolidRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSolidRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSolidRequestMultiError(errors)
	}

	return nil
}

// ListSolidRequestMultiError is an error wrapping multiple validation errors
// returned by ListSolidRequest.ValidateAll() if the designated constraints
// aren't met.
type ListSolidRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSolidRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSolidRequestMultiError) AllErrors() []error { return m }

// ListSolidRequestValidationError is the validation error returned by
// ListSolidRequest.Validate if the designated constraints aren't met.
type ListSolidRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSolidRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSolidRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSolidRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSolidRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSolidRequestValidationError) ErrorName() string { return "ListSolidRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListSolidRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSolidRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSolidRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSolidRequestValidationError{}

// Validate checks the field values on ListSolidReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSolidReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSolidReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListSolidReplyMultiError,
// or nil if none found.
func (m *ListSolidReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSolidReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSolidReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSolidReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSolidReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSolidReplyMultiError(errors)
	}

	return nil
}

// ListSolidReplyMultiError is an error wrapping multiple validation errors
// returned by ListSolidReply.ValidateAll() if the designated constraints
// aren't met.
type ListSolidReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSolidReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSolidReplyMultiError) AllErrors() []error { return m }

// ListSolidReplyValidationError is the validation error returned by
// ListSolidReply.Validate if the designated constraints aren't met.
type ListSolidReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSolidReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSolidReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSolidReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSolidReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSolidReplyValidationError) ErrorName() string { return "ListSolidReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListSolidReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSolidReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSolidReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSolidReplyValidationError{}
